package lwz.com.brokenLine;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;

import javax.microedition.khronos.opengles.GL10;

import lwz.com.Tempcn.OtherSurfaceView;
import lwz.com.Tempcn.TempBullet;
import lwz.com.cn.Bullet;
import lwz.com.cn.MySurfaceView;
 

import android.opengl.Matrix;

public class BrokenLines
{
	 FloatBuffer   mVertexBuffer;//頂點座標資料緩沖
     FloatBuffer   mTextureBuffer;//頂點著色資料緩沖
    int vCount;
    float yOffset;
    boolean changeData=true;
    int countK=0;
    float centerPoint[]=new float[3];//繪制的中心點 座標平移需要
    float angleTOChange[]=new float[3];//旋轉所需的三個角度值
	float[] lastPointa={0,0,0};//起始化前一此物件的末端兩點
	float[] lastPointb={0,0,0};
	float pointa[]={0,0};
	float pointb[]={0,0};
	int linSum=1000;
	public float lineData[][]=new float[linSum*2+2][3];
	RandomThread rt=new RandomThread();
	int count=0;
	public ArrayList<LineSegment> bokenlines=new ArrayList<LineSegment>();
	ArrayList<Float> finalVertexData=new ArrayList<Float>();
	LineSegment currLineSegment;
	boolean datafull=false;
	int showlinecoun=14;
	public float velocity[]={0f,0f,0f};
	public float startPo[]={0,0,-84};
	public TempBullet tbl;
	public Bullet tb;
	
	OtherSurfaceView os;
	MySurfaceView ms;
	public BrokenLines(OtherSurfaceView os,TempBullet tbl,float [] startPo,float []vec)
    {
		this.tbl=tbl;
		this.startPo=startPo;
		//System.out.println(startPo[0]+"+++++++++++++++ ,++++++++++++++++"+startPo[1]);
    	this.velocity=vec;
    	this.os=os;
		rt.start();
    }
//	public BrokenLines(OtherSurfaceView os,Bullet tbl,float [] startPo,float []vec)
//    {
//		this.tbl=tbl;
//		this.startPo=startPo;
//		//System.out.println(startPo[0]+"+++++++++++++++ ,++++++++++++++++"+startPo[1]);
//    	this.velocity=vec;
//    	this.os=os;
//		rt.start();
//    }
	public BrokenLines(MySurfaceView ms, Bullet tbl2,float[] startPo2, float[] vec) {
        this.tb=tbl2;
		this.startPo=startPo2;
    	this.velocity=vec;
    	this.ms=ms;
		rt.start();
	}
//	public BrokenLines(MySurfaceView ms, TempBullet tbl2,float[] startPo2, float[] vec) {
//        this.tb=tbl2;
//		this.startPo=startPo2;
//    	this.velocity=vec;
//    	this.ms=ms;
//		rt.start();
//	}
	float currPo[]={0,0,0};
	float postPo[]={0,0,0};
	float  lengthway[]={0f,0f,0};
	public int lineIndex=-1;
	public class RandomThread extends Thread//線段資料提供執行緒
	{
		public void run()
		{
			while(changeData)
			{ 
				if(tbl==null&&tb==null) 
				{ 
					bokenlines.clear();
					finalVertexData.clear();
					mVertexBuffer.clear();
					mTextureBuffer.clear();
					if(os!=null)
					{
						os.tailAl.remove(BrokenLines.this);
					}
					if(ms!=null)
					{
						ms.tailAl.remove(BrokenLines.this);
					}
					changeData=false;
				}else
				{ 
				lineIndex++;
				if(tbl!=null||tb!=null)//lineIndex<linSum
				 {
					if(lineIndex<14)
					{
						showlinecoun=lineIndex;
					}  
					if(lineIndex==0)//第一個線段的起點
					{ 
						lineData[lineIndex*2]=new float[]{startPo[0]/3,startPo[1]/3,startPo[2]/3}; 
						//System.out.print(tbl.cuerrentX/3""+tbl.cuerrentY/3+",");
		    		}else 
					{ 
						lineData[lineIndex*2]=lineData[(lineIndex-1)*2+1];
					}
					if(tbl!=null)
					{
					   lineData[lineIndex*2+1][0]=tbl.cuerrentX/3;//目前線段的終點 
  			           lineData[lineIndex*2+1][1]=tbl.cuerrentY/3;//目前線段的終點
	  			         if(tbl.flag==2)
	 					{
	  			        	tbl=null;
	 					}
					} 
					if(tb!=null)
					{
						lineData[lineIndex*2+1][0]=tb.cuerrentX/3;//目前線段的終點 
  			            lineData[lineIndex*2+1][1]=tb.cuerrentY/3;//目前線段的終點
  			            if(tb.flag==2)
	   					{
	    			        tb=null;
	   					}
					}
					
					
					addLineSegment(lineData[lineIndex*2],lineData[lineIndex*2+1]);
					simulateCurrLineSegment(bokenlines.get(lineIndex));
					try
					{
					    //每次加入一個線段 並對線段進行處理
						Thread.sleep(50);
					}catch(Exception e)
					{
					}
				}
				}
			}
		}
	}
	
	public void initLineSegment()//起始化線段清單
	{
		for(int i=0;i<lineData.length-1;i+=2)
		{
			LineSegment templine1=new LineSegment(1f,lineData[i],lineData[i+1]);
			bokenlines.add(templine1);
		}
	}
	
	
 
	public void addLineSegment(float[] start,float []end)//加入線段
	{ 
			LineSegment templine=new LineSegment(1f,start,end);
			bokenlines.add(templine);
	}
	public void simulateCurrLineSegment( LineSegment tempTf)//類比線段自己的平移縮放
	{
	        	  tempTf.mMatrixInfo.setInitStack();
	              tempTf.mMatrixInfo.translate(2*tempTf.centerPoint[0],2*tempTf.centerPoint[1],tempTf.centerPoint[2]);
	              tempTf.mMatrixInfo.rotate((float)Math.toDegrees(tempTf.angleTOChange[2]), 0, 0, 1);
	              if(tempTf.startP[0]>tempTf.endP[0])
	              {
	            	  tempTf.mMatrixInfo.rotate(180, 0, 0, 1);
	              }
	}
	public void simulateLineSegment()//類比線段自己的平移縮放
	{
		 for(int i=0;i<bokenlines.size();i++)
	        {
			      //類比線段的 平移和 旋轉
	        	  LineSegment tempTf= bokenlines.get(i);
	        	  tempTf.mMatrixInfo.setInitStack();
	              tempTf.mMatrixInfo.translate(2*tempTf.centerPoint[0],2*tempTf.centerPoint[1],tempTf.centerPoint[2]);
	              tempTf.mMatrixInfo.rotate((float)Math.toDegrees(tempTf.angleTOChange[2]), 0, 0, 1);
	              if( tempTf.startP[0]>tempTf.endP[0])
	              {
	            	  tempTf.mMatrixInfo.rotate(180, 0, 0, 1);
	              }
	        }
	}
	  ByteBuffer tbb;
	  ByteBuffer vbb ;
	  public void initVertexData()
	    {
	       		vCount=(showlinecoun*2+2);
		    	//裝入起始點 
		    	if(finalVertexData.size()!=1)//清理 資料清單 
		    	{
		    		finalVertexData.clear();
		    	}
		    	if(bokenlines.size()>=1)
		    	{
		    		LineSegment line0=bokenlines.get(0);
		    		float result[]=new float[4];
		    		float originPoint[]={line0.position[0][0],line0.position[0][1],line0.position[0][2],1};
			    	Matrix.multiplyMV(result,0, line0.mMatrixInfo.getMMatrix(), 0,originPoint,0);
			    	finalVertexData.add(result[0]);
			    	finalVertexData.add(result[1]);
			    	finalVertexData.add(result[2]);
			    	
			    	float result1[]=new float[4] ;
			    	float originPoint2[]={line0.position[1][0],line0.position[1][1],line0.position[1][2],1};
			    	Matrix.multiplyMV(result1, 0, line0.mMatrixInfo.getMMatrix(), 0, originPoint2, 0);
			    	finalVertexData.add(result1[0]);
			    	finalVertexData.add(result1[1]);
			    	finalVertexData.add(result1[2]);
		    	}
			    //計算中間點座標 並裝入清單
			    for(int i=1;i<bokenlines.size();i++)
			    {
			    	//獲得前一個和目前的線段參考
			    	LineSegment temline0=bokenlines.get(i-1);
			    	LineSegment temline1=bokenlines.get(i);
			    	
			     	//獲得上一個線段的 第三個頂點
			    	float result1[]=new float[4];
			    	float originPointa2[]={temline0.position[2][0],temline0.position[2][1],temline0.position[2][2],1};
			    	Matrix.multiplyMV(result1, 0, temline0.mMatrixInfo.getMMatrix(), 0, originPointa2, 0);
			    	
			    	//獲得上一個線段的 第四個頂點
			    	float result2[]=new float[4];
			    	float originPointa3[]={temline0.position[3][0],temline0.position[3][1],temline0.position[3][2],1};
			    	Matrix.multiplyMV(result2, 0, temline0.mMatrixInfo.getMMatrix(), 0, originPointa3, 0);
			    	
			    	//獲得目前線段的 第1個頂點
			    	float result3[]=new float[4] ;
			    	float originPointb1[]={temline1.position[0][0],temline1.position[0][1],temline1.position[0][2],1};
			    	Matrix.multiplyMV(result3, 0, temline1.mMatrixInfo.getMMatrix(), 0, originPointb1, 0);
			    	
			    	//獲得目前線段的 第2個頂點
			    	float result4[]=new float[4];
			    	float originPointb2[]={temline1.position[1][0],temline1.position[1][1],temline1.position[1][2],1};
			    	Matrix.multiplyMV(result4, 0, temline1.mMatrixInfo.getMMatrix(), 0, originPointb2,0);
			    	
			    	
			    	float finalresultA[]=new float[3] ;
			    	float tempss[]=new float[3];
			    	tempss[0]=(result1[0]+result3[0])/2;
			    	tempss[1]=(result1[1]+result3[1])/2;
			    	tempss[2]=(result1[2]+result3[2])/2;
			    	float lastEnd[]=temline0.endP;
			    	finalresultA[0]=2*tempss[0]-lastEnd[0];
			    	finalresultA[1]=2*tempss[1]-lastEnd[1];
			    	finalresultA[2]=2*tempss[2]-lastEnd[2];
			    	
			    	//``++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			    	float finalresultB[]=new float[3] ;
			    	float temps[]=new float[3];
			    	temps[0]=(result2[0]+result4[0])/2;
			    	temps[1]=(result2[1]+result4[1])/2;
			    	temps[2]=(result2[2]+result4[2])/2; 
			    	finalresultB[0]=2*temps[0]-lastEnd[0];
			    	finalresultB[1]=2*temps[1]-lastEnd[1];
			    	finalresultB[2]=2*temps[2]-lastEnd[2];
			    	//``++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			    	
			    	//插入經由平jun後的點		
			    	finalVertexData.add(finalresultA[0]);
			    	finalVertexData.add(finalresultA[1]);
			    	finalVertexData.add(finalresultA[2]);
			    	
			    	finalVertexData.add(finalresultB[0]);
			    	finalVertexData.add(finalresultB[1]);
			    	finalVertexData.add(finalresultB[2]);
			    }
				   
			 	float vertices[]= new float[(showlinecoun*2+2)*3];
			 	int j=0;
				  for(int i=finalVertexData.size()-(showlinecoun*2+2)*3;i<finalVertexData.size()&&finalVertexData.size()>=(showlinecoun*2+2)*3;i++)
				  {
					  vertices[j++]=finalVertexData.get(i);
				  }
				  if(vbb!=null)
				 	{
					  vbb.clear();
				 	}
			    vbb= ByteBuffer.allocateDirect((showlinecoun*2+2)*3*4);
			    vbb.order(ByteOrder.nativeOrder());
			    if(mVertexBuffer!=null&&mVertexBuffer.hasRemaining())
				  {
					  mVertexBuffer.clear();
				  }
			    mVertexBuffer = vbb.asFloatBuffer();
			    mVertexBuffer.put(vertices);
			    mVertexBuffer.position(0);
			    
	 			float textures[]=new float[(showlinecoun*2+2)*2];
				for(int i=0;i<1;i++)
				{
					textures[i]=0;
					textures[i+1]=0;
					textures[i+2]=0;
					textures[i+3]=1;
					textures[i+4]=1/4f;
					textures[i+5]=0;
					textures[i+6]=1/4f;
					textures[i+7]=1; 
				}
				for(int i=1;i<showlinecoun;i++)
				{
					textures[i*4]=1/4f;
					textures[i*4+1]=0;
					textures[i*4+2]=1/4f;
					textures[i*4+3]=1;
					textures[i*4+4]=1f;
					textures[i*4+5]=0;
					textures[i*4+6]=1;
					textures[i*4+7]=1;
				}
			 	if(tbb!=null)
			 	{
			 		tbb.clear();
			 	}
			   tbb= ByteBuffer.allocateDirect(textures.length*4);
			    tbb.order(ByteOrder.nativeOrder());
			    if(mTextureBuffer!=null&&mTextureBuffer.hasRemaining())
				  {
			 		mTextureBuffer.clear();
				  }
			      mTextureBuffer= tbb.asFloatBuffer();
				  mTextureBuffer.put(textures);
				  mTextureBuffer.position(0);
	    }
	    
    
    public void drawSelf(int texId,GL10 gl) //需要傳進上一個 條帶的後兩個點和一個下一個要計算的中心點
    {
     	if(finalVertexData.size()!=linSum*2+2)
    	{
    		initVertexData();//起始化dingdian資料
    	}
    	
        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);//啟用頂點座標陣列
 		//為畫筆指定頂點座標資料
         gl.glVertexPointer
         (
         		3,				//每個頂點的座標數量為3  xyz 
         		GL10.GL_FLOAT,	//頂點座標值的型態為 GL_FIXED
         		0, 				//連續頂點座標資料之間的間隔
         		mVertexBuffer	//頂點座標資料
         );
         //開啟紋理
         gl.glEnable(GL10.GL_TEXTURE_2D);   
         //容許使用紋理ST座標緩沖
         gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
         //為畫筆指定紋理ST座標緩沖
         gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mTextureBuffer);
         //綁定目前紋理
         gl.glBindTexture(GL10.GL_TEXTURE_2D, texId);
         gl.glTexCoordPointer
         (
         		2, 
         		GL10.GL_FLOAT, 
         		0,
                mTextureBuffer
         );
         //繪制圖形
         gl.glDrawArrays
         (
         		GL10.GL_TRIANGLE_STRIP,//GL_LINE_STRIP,//GL_POINTS,//
         		0,
         		vCount
         );
         //關閉紋理
         gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
         gl.glDisable(GL10.GL_TEXTURE_2D);
    }
}